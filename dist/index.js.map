{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;qBAqFW,SAAS;;;;sBAnFnB,QAAQ;;;;2BACN,iBAAiB;;;;2BACd,eAAe;;;;iCACd,oBAAoB;;;;oCACjB,uBAAuB;;;;+BAC5B,kBAAkB;;;;+BAClB,kBAAkB;;;;+BAClB,kBAAkB;;;;8BACnB,iBAAiB;;;;kCACb,qBAAqB;;;;oBACzB,MAAM;;;;sBACJ,SAAS;;;;wBACR,UAAU;;;;0BACP,aAAa;;;;sBACjB,OAAO;;;;qBACR,MAAM;;;;mBACR,IAAI;;;;uBACA,QAAQ;;;;sBACX,SAAS;;;;AAE1B,IAAM,IAAI,GAAG,sBAAQ,SAAS,mBAAO,CAAC;AACtC,IAAM,EAAE,GAAG,sBAAQ,YAAY,yBAAY,CAAC;AAC5C,IAAM,EAAE,GAAG,sBAAQ,SAAS,iBAAK,CAAC;AAClC,IAAM,MAAM,GAAG,sBAAQ,SAAS,qBAAS,CAAC;;AAE1C,IAAM,UAAU,GAAG,gBAAgB,CAAC;;AAEpC,IAAM,IAAI,GAAG,yBAAE;AACb,MAAI,0BAAQ;AACZ,SAAO,EAAE,oBAAE,MAAM,CAAC,+BAAQ,MAAM,mCAAY,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACpE,OAAK,8BAAO;AACZ,OAAK,8BAAO;AACZ,OAAK,8BAAO;AACZ,MAAI,6BAAM;AACV,UAAQ,iCAAU;AAClB,UAAQ,EAAE,CACR,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,MAAM,EACN,MAAM,EACN,KAAK,EACL,MAAM,CACP;AACD,aAAW,EAAE,CACX,KAAK,EACL,KAAK,CACN;AACD,MAAI,EAAE,CACJ,KAAK,EACL,MAAM,CACP;CACF,CAAC,CACC,SAAS,CAAC,UAAC,KAAK;SAAK,oBAAE,GAAG,CAAC,KAAK,EAAE,UAAC,SAAS;WAAK,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;GAAA,CAAC;CAAA,CAAC,CAC7E,IAAI,EAAE,CACN,KAAK,EAAE,CAAC;;AAEX,IAAM,OAAO,GAAG,yBAAE,IAAI,CAAC,CACpB,GAAG,CAAC,UAAC,UAAU,EAAE,IAAI;SAAK,oBAAE,GAAG,CAAC,UAAU,EACzC,UAAC,SAAS;WAAK,CAAC,SAAS,EAAE,IAAI,CAAC;GAAA,CAAC;CAAA,CAAC,CACnC,OAAO,EAAE,CACT,MAAM,EAAE,CACR,IAAI,EAAE,CACN,KAAK,EAAE,CAAC;;AAEX,IAAM,mBAAmB,GAAG;AAC1B,MAAI,EAAE,IAAI;AACV,UAAQ,EAAE,UAAU;AACpB,SAAO,EAAE,SAAS;AAClB,OAAK,EAAE,OAAO;AACd,OAAK,EAAE,OAAO;AACd,MAAI,EAAE,UAAU;AAChB,MAAI,EAAE,MAAM;AACZ,OAAK,EAAE,OAAO;AACd,aAAW,EAAE,aAAa;AAC1B,MAAI,EAAE,MAAM;CACb,CAAC;;AAEF,SAAS,OAAO,CAAC,QAAQ,EAAE;AACzB,SAAO,kBAAK,OAAO,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;CAC1D;;AAEc,SAAS,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE;AACjD,WAAS,OAAO,GAAG;AACjB,QAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;AAC9B,aAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;KACvC;GACF;;AAED,SAAO,CAAC,GAAG,mBAAiB,SAAS,SAAM,CAAC;;AAE5C,sBAAE,QAAQ,CAAC,IAAI,EAAE;AACf,UAAM,EAAE,KAAK;AACb,WAAO,EAAE,KAAK;AACd,SAAK,EAAE,KAAK;GACb,CAAC,CAAC;;AAEH,MAAI,IAAI,CAAC,KAAK,EAAE;AACd,uBAAO,MAAM,CAAC,yBAAI,IAAI,CAAC,CAAC;GACzB;AACD,MAAM,KAAK,GAAG,wBAAO,yBAAI,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;AAgB/B,MAAM,UAAU,GAAG,kBAAK,IAAI,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;;AAE1D,MAAI,UAAU,GAAG,CAAC,CAAC;AACnB,MAAM,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;;AAE9B,SAAO,EAAE,CAAC,aAAa,CAAC,UAAU,EAAE,MAAM,CAAC,CACxC,IAAI,CAAC,UAAC,GAAG;WAAK,oBAAE,QAAQ,CAAC,mBAAmB,EAAE,oBAAK,QAAQ,CAAC,GAAG,CAAC,CAAC;GAAA,CAAC,SAC7D,CAAC,YAAM;AACX,WAAO,iCAA+B,UAAU,CAAG,CAAC;AACpD,WAAO,mBAAmB,CAAC;GAC5B,CAAC,CACD,IAAI,CAAC,UAAC,YAAY,EAAK;AACtB,SAAK,CAAC,8BAA8B,EAAE,YAAY,CAAC,CAAC;AACpD,QAAM,KAAK,GAAG,yBAAE,YAAY,CAAC,CAC1B,IAAI,CAAC,UAAC,IAAI,EAAE,OAAO;aAAK,yBAAO,OAAO,CAAC;KAAA,CAAC,CACxC,OAAO,CAAC,UAAC,IAAI,EAAE,OAAO;aAAK,kBAAK,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC;KAAA,CAAC,CACzD,SAAS,CAAC,UAAC,IAAI;aAAK,kBAAK,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC;KAAA,CAAC,CAC/C,KAAK,EAAE,CAAC;AACX,WAAO,sBAAQ,GAAG,CAAC,oBAAE,IAAI,CAAC,KAAK,CAAC,EAAE,UAAC,QAAQ,EAAK;AAC9C,UAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;AACjC,WAAK,cAAY,QAAQ,CAAG,CAAC;AAC7B,aAAO,IAAI,CAAC,QAAQ,CAAC,CAClB,GAAG,CAAC,UAAC,SAAS,EAAK;AAClB,eAAO,CAAC,GAAG,YAAU,SAAS,CAAC,MAAM,yBAAoB,QAAQ,OAAI,CAAC;OACvE,CAAC,CACD,IAAI,CAAC,UAAC,SAAS,EAAK;AACnB,YAAI,CAAC,IAAI,CAAC,MAAM,IACd,SAAS,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;AAChD,eAAK,eAAa,QAAQ,CAAG,CAAC;AAC9B,iBAAQ,MAAM,CAAC,QAAQ,CAAC,UACf,CAAC,SAAS,CAAC,CAAC;SACtB;AACD,eAAO,SAAS,CAAC;OAClB,CAAC,CACD,IAAI,CAAC,UAAC,SAAS,EAAK;AACnB,YAAI,SAAS,CAAC,MAAM,EAAE;AACpB,qBAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SAC3B;AACD,eAAO,SAAS,CAAC;OAClB,CAAC,CACD,IAAI,CAAC,UAAC,QAAQ,EAAK;AAClB,YAAM,YAAY,GAAG,kBAAK,IAAI,CAAC,QAAQ,EAAE,kBAAK,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;AAClE,aAAK,CAAI,QAAQ,YAAO,YAAY,CAAG,CAAC;AACxC,YAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AAChB,iBAAO,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;SACnC;OACF,CAAC,CACD,IAAI,CAAC,UAAC,SAAS,EAAK;AACnB,kBAAU,IAAI,SAAS,CAAC,MAAM,CAAC;OAChC,CAAC,CAAC;KACN,CAAC,CACC,IAAI,CAAC;aAAM,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC;KAAA,CAAC,CACtC,GAAG,CAAC,UAAC,SAAS,EAAK;AAClB,aAAO,YAAU,SAAS,CAAC,MAAM,4BAAuB,SAAS,CAAG,CAAC;KACtE,CAAC,CACD,GAAG,CAAC,UAAC,QAAQ;aAAK,kBAAK,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC;KAAA,CAAC,CACjD,MAAM,CAAC,UAAC,QAAQ;aAAK,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAC1C,IAAI,CAAC,UAAC,IAAI;eAAK,CAAC,IAAI,CAAC,cAAc,EAAE,IACtC,kBAAK,QAAQ,CAAC,QAAQ,CAAC,KACvB,UAAU;OAAA,CAAC,SACL,CAAC,UAAC,GAAG,EAAK;AACd,eAAO,CAAC,GAAG,CAAC,CAAC;AACb,eAAO,KAAK,CAAC;OACd,CAAC;KAAA,CAAC,CACJ,GAAG,CAAC,UAAC,SAAS,EAAK;AAClB,aAAO,YAAU,SAAS,CAAC,MAAM,6BAAwB,SAAS,CAAG,CAAC;KACvE,CAAC,CACD,MAAM,CAAC,UAAC,QAAQ;aAAK,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;KAAA,CAAC,CACzD,GAAG,CAAC,UAAC,SAAS,EAAK;AAClB,aAAO,CAAC,WAAS,SAAS,CAAC,MAAM,kDACxB,SAAS,CAAE,CAAC,CAAC;KACvB,CAAC,CACD,IAAI,CAAC,UAAC,QAAQ,EAAK;AAClB,UAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC9B,UAAM,IAAI,GAAG,kBAAK,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9D,UAAM,YAAY,GAAG,kBAAK,IAAI,CAAC,IAAI,EAAE,kBAAK,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC9D,WAAK,CAAI,QAAQ,YAAO,YAAY,CAAG,CAAC;AACxC,UAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AAC1B,YAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AAChB,eAAK,eAAa,IAAI,CAAG,CAAC;AAC1B,iBAAO,MAAM,CAAC,IAAI,CAAC,CAChB,IAAI,CAAC,YAAM;AACV,uBAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACtB,mBAAO,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;WACnC,CAAC,CAAC;SACN;AACD,mBAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;OACvB;AACD,UAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AAChB,eAAO,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;OACnC;KACF,CAAC,CACD,IAAI,CAAC,UAAC,SAAS,EAAK;AACnB,gBAAU,IAAI,SAAS,CAAC,MAAM,CAAC;AAC/B,UAAI,IAAI,CAAC,MAAM,EAAE;AACf,eAAO,CAAC,GAAG,WAAW,CAAC;OACxB;;AAED,aAAO,CAAC,GAAG,yBAAuB,UAAU,CAAG,CAAC;AAChD,aAAO,CAAC,GAAG,iCAA+B,WAAW,CAAC,IAAI,CAAG,CAAC;KAC/D,CAAC,CAAC;GACN,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;AACd,WAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;GAClB,CAAC,CAAC;CACN","file":"index.js","sourcesContent":["'use strict';\n\nimport _ from 'lodash';\nimport pkg from '../package.json';\nimport threeD from '3d-extensions';\nimport archive from 'archive-extensions';\nimport compressed from 'compressed-extensions';\nimport audio from 'audio-extensions';\nimport image from 'image-extensions';\nimport video from 'video-extensions';\nimport text from 'text-extensions';\nimport subtitle from 'subtitle-extensions';\nimport path from 'path';\nimport isGlob from 'is-glob';\nimport Promise from 'bluebird';\nimport gracefulFs from 'graceful-fs';\nimport _debug from 'debug';\nimport _glob from 'glob';\nimport _mv from 'mv';\nimport _mkdirp from 'mkdirp';\nimport yaml from 'js-yaml';\n\nconst glob = Promise.promisify(_glob);\nconst fs = Promise.promisifyAll(gracefulFs);\nconst mv = Promise.promisify(_mv);\nconst mkdirp = Promise.promisify(_mkdirp);\n\nconst configFile = '.declutter.yml';\n\nconst exts = _({\n  '3d': threeD,\n  archive: _.unique(archive.concat(compressed)).concat(['pkg', 'bin']),\n  audio: audio,\n  image: image,\n  video: video,\n  text: text,\n  subtitle: subtitle,\n  document: [\n    'pdf',\n    'doc',\n    'rtf',\n    'xls',\n    'xlsx',\n    'docx',\n    'ppt',\n    'pptx'\n  ],\n  application: [\n    'exe',\n    'app'\n  ],\n  font: [\n    'ttf',\n    'woff'\n  ]\n})\n  .mapValues((value) => _.map(value, (extension) => extension.replace('.', '')))\n  .sort()\n  .value();\n\nconst allExts = _(exts)\n  .map((extensions, dest) => _.map(extensions,\n    (extension) => [extension, dest]))\n  .flatten()\n  .object()\n  .sort()\n  .value();\n\nconst defaultDestinations = {\n  '3d': '3d',\n  document: 'document',\n  archive: 'archive',\n  image: 'image',\n  video: 'video',\n  subs: 'subtitle',\n  text: 'text',\n  audio: 'audio',\n  application: 'application',\n  font: 'font'\n};\n\nfunction extname(filename) {\n  return path.extname(filename).substring(1).toLowerCase();\n}\n\nexport default function declutter(directory, opts) {\n  function verbose() {\n    if (opts.debug || opts.verbose) {\n      console.log.apply(console, arguments);\n    }\n  }\n\n  console.log(`Decluttering ${directory}...`);\n\n  _.defaults(opts, {\n    dryRun: false,\n    verbose: false,\n    debug: false\n  });\n\n  if (opts.debug) {\n    _debug.enable(pkg.name);\n  }\n  const debug = _debug(pkg.name);\n\n  //const globs = _.pick(destinations, (value, key) => isGlob(key));\n\n  //\n  //return Promise.map(globs, (globname) => {\n  //        return glob(globname);\n  //      })\n  //        .filter((result) => !_.contains(destinations, result))\n  //        .map((result) => path.relative(directory, result))\n  //        .then((results) => {\n  //          if (_.contains(_.flatten(results), filename)) {\n  //\n  //          }\n  //        })\n\n  const configpath = path.join(directory, '.declutter.yml');\n\n  let totalFiles = 0;\n  const createdDirs = new Set();\n\n  return fs.readFileAsync(configpath, 'utf8')\n    .then((cfg) => _.defaults(defaultDestinations, yaml.safeLoad(cfg)))\n    .catch(() => {\n      verbose(`Failed to read config file ${configpath}`);\n      return defaultDestinations;\n    })\n    .then((destinations) => {\n      debug('Pattern/destination mapping:', destinations);\n      const globs = _(destinations)\n        .pick((dest, pattern) => isGlob(pattern))\n        .mapKeys((dest, pattern) => path.join(directory, pattern))\n        .mapValues((dest) => path.join(directory, dest))\n        .value();\n      return Promise.map(_.keys(globs), (globspec) => {\n        const globdest = globs[globspec];\n        debug(`Finding ${globspec}`);\n        return glob(globspec)\n          .tap((globpaths) => {\n            console.log(`Found ${globpaths.length} files matching \"${globspec}\"`);\n          })\n          .then((globpaths) => {\n            if (!opts.dryRun &&\n              globpaths.length && !createdDirs.has(globdest)) {\n              debug(`Creating ${globdest}`);\n              return  mkdirp(globdest)\n                .return(globpaths);\n            }\n            return globpaths;\n          })\n          .then((globpaths) => {\n            if (globpaths.length) {\n              createdDirs.add(globdest);\n            }\n            return globpaths;\n          })\n          .each((globpath) => {\n            const destGlobpath = path.join(globdest, path.basename(globpath));\n            debug(`${globpath} => ${destGlobpath}`);\n            if (!opts.dryRun) {\n              return mv(globpath, destGlobpath);\n            }\n          })\n          .then((globpaths) => {\n            totalFiles += globpaths.length;\n          });\n      })\n        .then(() => fs.readdirAsync(directory))\n        .tap((filenames) => {\n          verbose(`Found ${filenames.length} files remaining in ${directory}`);\n        })\n        .map((filename) => path.join(directory, filename))\n        .filter((filepath) => fs.lstatAsync(filepath)\n          .then((stat) => !stat.isSymbolicLink() &&\n          path.basename(filepath) !==\n          configFile)\n          .catch((err) => {\n            verbose(err);\n            return false;\n          }))\n        .tap((filepaths) => {\n          verbose(`Found ${filepaths.length} files to examine in ${directory}`);\n        })\n        .filter((filepath) => Boolean(allExts[extname(filepath)]))\n        .tap((filepaths) => {\n          verbose(`Found ${filepaths.length} files matching known extensions` +\n            ` in ${directory}`);\n        })\n        .each((filepath) => {\n          const ext = extname(filepath);\n          const dest = path.join(directory, destinations[allExts[ext]]);\n          const destFilepath = path.join(dest, path.basename(filepath));\n          debug(`${filepath} => ${destFilepath}`);\n          if (!createdDirs.has(dest)) {\n            if (!opts.dryRun) {\n              debug(`Creating ${dest}`);\n              return mkdirp(dest)\n                .then(() => {\n                  createdDirs.add(dest);\n                  return mv(filepath, destFilepath);\n                });\n            }\n            createdDirs.add(dest);\n          }\n          if (!opts.dryRun) {\n            return mv(filepath, destFilepath);\n          }\n        })\n        .then((filepaths) => {\n          totalFiles += filepaths.length;\n          if (opts.dryRun) {\n            console.log(`DRY RUN`);\n          }\n\n          console.log(`Total files moved: ${totalFiles}`);\n          console.log(`Total directories created: ${createdDirs.size}`);\n        });\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n}\n\n"]}